{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Sample template showing how to create a VPC in 3 zones with DNS, public and private subnets and Public IPs enabled.  A NAT instnace for each zone is created, and a single VPN instnce (openvpn)",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "NatAMI": {
      "Description": "AMI for the NAT instance. Default: (us-west-2) ami-290f4119",
      "Type": "String",
      "Default": "ami-290f4119",
      "ConstraintDescription" : 
           "Must be HVN and match the region e.g. (us-east-1) ami-303b1458, (us-west-2) ami-290f4119, (eu-west1) ami-6975eb1e"
    },
     "VPNAmi": {
      "Description": "AMI for the VPN bastion instance. Default: us-west-2) ami-9fe2f2af",
      "Type": "String",
      "Default": "ami-9fe2f2af",
      "ConstraintDescription" : 
           "Must be HVN and match the region e.g. (us-east-1) ami-5fe36434, (us-west-2) ami-9fe2f2af, (eu-west1) ami-79a36b0e"
    },
    
    "NetworkName": {
      "Description": "Name used to tag network",
      "Type": "String"
    },
    "SSHLocation": {
      "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": 9,
      "MaxLength": 18,
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "VPNInstanceType": {
      "Description": "OpenVPN EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues" : [ 
       "c3.2xlarge","c3.4xlarge","c3.8xlarge","c3.large","c3.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c4.large","c4.xlarge","cc2.8xlarge","cr1.8xlarge","d2.2xlarge","d2.4xlarge","d2.8xlarge","d2.xlarge","g2.2xlarge","hi1.4xlarge","hs1.8xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge","i2.xlarge","m1.large","m1.medium","m1.small","m1.xlarge","m2.2xlarge","m2.4xlarge","m2.xlarge","m3.2xlarge","m3.large","m3.medium","m3.xlarge","m4.10xlarge","m4.2xlarge","m4.4xlarge","m4.large","m4.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","r3.large","r3.xlarge","t1.micro","t2.large","t2.medium","t2.micro","t2.small"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "NATInstanceType": {
      "Description": "OpenVPN EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues" : [ 
       "c3.2xlarge","c3.4xlarge","c3.8xlarge","c3.large","c3.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c4.large","c4.xlarge","cc2.8xlarge","cr1.8xlarge","d2.2xlarge","d2.4xlarge","d2.8xlarge","d2.xlarge","g2.2xlarge","hi1.4xlarge","hs1.8xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge","i2.xlarge","m1.large","m1.medium","m1.small","m1.xlarge","m2.2xlarge","m2.4xlarge","m2.xlarge","m3.2xlarge","m3.large","m3.medium","m3.xlarge","m4.10xlarge","m4.2xlarge","m4.4xlarge","m4.large","m4.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","r3.large","r3.xlarge","t1.micro","t2.large","t2.medium","t2.micro","t2.small"
      ],

      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "VPCCidr": {
      "Description": "The VPC CIDR Range",
      "Type": "String",
      "MinLength": 9,
      "MaxLength": 18,
      "Default": "10.0.0.0/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PublicCidrs": {
      "Description": "Three Public Subnet CIDR Rangees seperated by commas.",
      "Type": "CommaDelimitedList",
      "Default": "10.0.0.0/24,10.0.1.0/24,10.0.2.0/24",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
       "PrivateCidrs": {
      "Description": "Three Private Subnet CIDR Ranges seperated by commas.",
      "Type": "CommaDelimitedList",
      "Default": "10.0.3.0/24,10.0.4.0/24,10.0.5.0/24",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
 
    "Zones": {
      "Description": "Three AZ Zones seperated by commas. e.g. us-west-2a,us-west-2b,us-west-2c",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "NATPrivateIPs": {
      "Description": "Three Private IPs of the NAT Instances in the public subnet seperated by commas.",
      "Type": "CommaDelimitedList",
      "Default": "10.0.0.11,10.0.1.11,10.0.2.11",
      "ConstraintDescription": "must be a valid IP list of the form x.x.x.x"
    },
    "VPNPrivateIP": {
      "Description": "The Private IP of the VPN Instance in the public subnet",
      "Type": "String",
      "MinLength": 7,
      "MaxLength": 15,
      "Default": "10.0.0.10",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "must be a valid IP of the form x.x.x.x"
    }
  },
  
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "CidrBlock": {"Ref": "VPCCidr"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ]
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::Select": [
          0,
          {"Ref": "PublicCidrs"}
        ]},
        "AvailabilityZone": {"Fn::Select": [
          0,
          {"Ref": "Zones"}
        ]},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::Select": [
          1,
          {"Ref": "PublicCidrs"}
        ]},
        "AvailabilityZone": {"Fn::Select": [
          1,
          {"Ref": "Zones"}
        ]},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ]
      }
    },
    "PublicSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::Select": [
          2,
          {"Ref": "PublicCidrs"}
        ]},
        "AvailabilityZone": {"Fn::Select": [
          2,
          {"Ref": "Zones"}
        ]},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": [
          0,
          {"Ref": "Zones"}
        ]},
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::Select": [
          0,
          {"Ref": "PrivateCidrs"}
        ]},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Subnet",
            "Value": "Private Subnet 1"
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": [
          1,
          {"Ref": "Zones"}
        ]},
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::Select": [
          1,
          {"Ref": "PrivateCidrs"}
        ]},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Subnet",
            "Value": "Private Subnet 2"
          }
        ]
      }
    },
    "PrivateSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": [
          2,
          {"Ref": "Zones"}
        ]},
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::Select": [
          2,
          {"Ref": "PrivateCidrs"}
        ]},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Subnet",
            "Value": "Private Subnet 3"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {"Tags": [
        {
          "Key": "Application",
          "Value": {"Ref": "AWS::StackName"}
        },
        {
          "Key": "Network",
          "Value": {"Ref": "NetworkName"}
        }
      ]}
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ]
      }
    },
    "PublicRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ]
      }
    },
    "PublicRouteTable3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ]
      }
    },
    "PrivateRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Name",
            "Value": "PrivateRouteTable1"
          }
        ]
      }
    },
    "PrivateRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Name",
            "Value": "PrivateRouteTable2"
          }
        ]
      }
    },
    "PrivateRouteTable3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Name",
            "Value": "PrivateRouteTable3"
          }
        ]
      }
    },
    "PublicRoute1": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {"Ref": "PublicRouteTable1"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicRoute2": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {"Ref": "PublicRouteTable2"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicRoute3": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {"Ref": "PublicRouteTable3"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PrivateRoute1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PrivateRouteTable1"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {"Ref": "NATInstance1"}
      }
    },
    "PrivateRoute2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PrivateRouteTable2"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {"Ref": "NATInstance2"}
      }
    },
    "PrivateRoute3": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PrivateRouteTable3"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {"Ref": "NATInstance3"}
      }
    },
    "PublicSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicSubnet1"},
        "RouteTableId": {"Ref": "PublicRouteTable1"}
      }
    },
    "PublicSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicSubnet2"},
        "RouteTableId": {"Ref": "PublicRouteTable2"}
      }
    },
    "PublicSubnetRouteTableAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicSubnet3"},
        "RouteTableId": {"Ref": "PublicRouteTable3"}
      }
    },
    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PrivateSubnet1"},
        "RouteTableId": {"Ref": "PrivateRouteTable1"}
      }
    },
    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PrivateSubnet2"},
        "RouteTableId": {"Ref": "PrivateRouteTable2"}
      }
    },
    "PrivateSubnet3RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PrivateSubnet3"},
        "RouteTableId": {"Ref": "PrivateRouteTable3"}
      }
    },
    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ]
      }
    },
    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Name",
            "Value": "PrivateNetworkAcl"
          }
        ]
      }
    },
    "PublicInboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": 100,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": 80,
          "To": 80
        }
      }
    },
    "PublicInboundHTTPSPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": 101,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": 443,
          "To": 443
        }
      }
    },
    "PublicInboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": 102,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": {"Ref": "SSHLocation"},
        "PortRange": {
          "From": 22,
          "To": 22
        }
      }
    },
    "PublicInboundEphemeralPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": 103,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": 1024,
          "To": 65535
        }
      }
    },
    "PrivateInboundNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PrivateNetworkAcl"},
        "RuleNumber": 100,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": 100,
        "Protocol": 6,
        "RuleAction": "allow",
        "Egress": true,
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": 0,
          "To": 65535
        }
      }
    },
    "PublicSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicSubnet1"},
        "NetworkAclId": {"Ref": "PublicNetworkAcl"}
      }
    },
    "PublicSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicSubnet2"},
        "NetworkAclId": {"Ref": "PublicNetworkAcl"}
      }
    },
    "PublicSubnet3NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicSubnet3"},
        "NetworkAclId": {"Ref": "PublicNetworkAcl"}
      }
    },
    "NATIPAddress1": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {"Ref": "NATInstance1"}
      }
    },
    "NATIPAddress2": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {"Ref": "NATInstance2"}
      }
    },
    "NATIPAddress3": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {"Ref": "NATInstance3"}
      }
    },
    "NATSecurityGroup1" : {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "GroupDescription": "Enable SSH access via port 22 and HTTP Ports",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": {"Fn::Select": [
              0,
              {"Ref": "PrivateCidrs"}
            ]}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": {"Fn::Select": [
              0,
              {"Ref": "PrivateCidrs"}
            ]}
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "NATSecurityGroup2": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "GroupDescription": "Enable SSH access via port 22 and HTTP Ports",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": {"Fn::Select": [
              1,
              {
                "Ref": "PrivateCidrs"
              }
            ]}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": {"Fn::Select": [
              1,
              {"Ref": "PrivateCidrs"}
            ]}
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "NATSecurityGroup3": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "GroupDescription": "Enable SSH access via port 22 and HTTP Ports",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": {"Fn::Select": [
              2,
              {"Ref": "PrivateCidrs"}
            ]}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": {"Fn::Select": [
              2,
              {"Ref": "PrivateCidrs"}
            ]}
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      },
      "Metadata": {"AWS::CloudFormation::Designer": {"id": "ff602251-a2c4-4b34-a392-87c532ca3649"}}
    },
    "VPNSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "GroupDescription": "Enable SSH access via port 22 and OpenVPN Ports",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 943,
            "ToPort": 943,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": 1194,
            "ToPort": 1194,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      },
      "Metadata": {"AWS::CloudFormation::Designer": {"id": "3bb161cb-0b33-43cf-a589-56b2d943409a"}}
    },
    "NATInstance1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId":   {"Ref": "NatAMI"},
        "SecurityGroupIds": [{"Ref": "NATSecurityGroup1"}],
        "SubnetId": {"Ref": "PublicSubnet1"},
        "InstanceType": {"Ref": "NATInstanceType"},
        "SourceDestCheck": false,
        "KeyName": {"Ref": "KeyName"},
        "PrivateIpAddress": {"Fn::Select": [
          0,
          {"Ref": "NATPrivateIPs"}
        ]},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ],
        "UserData": {"Fn::Base64": {"Fn::Join": [
          "",
          [
            "#!/bin/bash\n",
            "/opt/aws/bin/cfn-signal '",
            {"Ref": "NATServerWaitHandle"},
            "'\n"
          ]
        ]}}
      },
      "Metadata": {"AWS::CloudFormation::Designer": {"id": "d0f3693e-b763-44d6-96ee-c37e380d26cc"}}
    },
    "NATInstance2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId":   {"Ref": "NatAMI"},
        "SecurityGroupIds": [{"Ref": "NATSecurityGroup2"}],
        "SubnetId": {"Ref": "PublicSubnet2"},
        "InstanceType": {"Ref": "NATInstanceType"},
        "SourceDestCheck": false,
        "KeyName": {"Ref": "KeyName"},
        "PrivateIpAddress": {"Fn::Select": [
          1,
          {"Ref": "NATPrivateIPs"}
        ]},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ],
        "UserData": {"Fn::Base64": {"Fn::Join": [
          "",
          [
            "#!/bin/bash\n",
            "/opt/aws/bin/cfn-signal '",
            {"Ref": "NATServerWaitHandle"},
            "'\n"
          ]
        ]}}
      }
    },
    "NATInstance3": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId":   {"Ref": "NatAMI"},

        "SecurityGroupIds": [{"Ref": "NATSecurityGroup3"}],
        "SubnetId": {"Ref": "PublicSubnet3"},
        "SourceDestCheck": false,
        "InstanceType": {"Ref": "NATInstanceType"},
        "KeyName": {"Ref": "KeyName"},
        "PrivateIpAddress": {"Fn::Select": [
          2,
          {"Ref": "NATPrivateIPs"}
        ]},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ],
        "UserData": {"Fn::Base64": {"Fn::Join": [
          "",
          [
            "#!/bin/bash\n",
            "/opt/aws/bin/cfn-signal '",
            {"Ref": "NATServerWaitHandle"},
            "'\n"
          ]
        ]}}
      }
    },
    "NATServerWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": [
        "NATInstance1",
        "NATInstance2",
        "NATInstance3"
      ],
      "Properties": {
        "Count": 3,
        "Handle": {"Ref": "NATServerWaitHandle"},
        "Timeout": 1800
      }
    },
    "VPNIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {"Domain": "vpc"}
    },
    "VPNIPAssoc": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "InstanceId": {"Ref": "VPNInstance"},
        "AllocationId": {"Fn::GetAtt": [
          "VPNIPAddress",
          "AllocationId"
        ]}
      }
    },
    "VPNInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
          "ImageId":   {"Ref": "VPNAmi"},
        "SecurityGroupIds": [{"Ref": "VPNSecurityGroup"}],
        "SubnetId": {"Ref": "PublicSubnet1"},
        "InstanceType": {"Ref": "VPNInstanceType"},
        "SourceDestCheck": false,
        "KeyName": {"Ref": "KeyName"},
        "PrivateIpAddress": {"Ref": "VPNPrivateIP"},
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackId"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ],
        "UserData": {"Fn::Base64": {"Fn::Join": [
          "\n",
          [
            "#I-Wish-This-Worked-But-It-Doesnt",
            {"Fn::Join": [
              "=",
              [
                "public_hostname",
                {"Ref": "VPNIPAddress"}
              ]
            ]},
            "admin_user=openvpn",
            "admin_pw=openvpn",
            "reroute_gw=0",
            "reroute_dns=0"
          ]
        ]}}
      },
      "Metadata": {"AWS::CloudFormation::Designer": {"id": "60d8103f-8686-4182-be2f-0895e54a7f84"}}
    },
    "NATServerWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {"AWS::CloudFormation::Designer": {"id": "ab190448-ba5c-4e80-9ed1-12a1acd5f504"}}
    },
    "EC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable from public network to EC2 hosts via SSH/22",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": 22,
          "ToPort": 22,
          "CidrIp": {"Ref": "SSHLocation"}
        }],
        "Tags": [
          {
            "Key": "Application",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Network",
            "Value": {"Ref": "NetworkName"}
          }
        ]
      }
    }
  },
  "Outputs": {
    "VpcID": {
      "Description": "VPCId of the newly created VPC",
      "Value": {"Ref": "VPC"}
    },
    "PublicSubnets": {
      "Description": "SubnetId of the public subnets",
      "Value": {"Fn::Join": [
        ",",
        [
          {"Ref": "PublicSubnet1"},
          {"Ref": "PublicSubnet2"},
          {"Ref": "PublicSubnet3"}
        ]
      ]}
    },
    "PrivateSubnets": {
      "Description": "SubnetId of the private subnets",
      "Value": {"Fn::Join": [
        ",",
        [
          {"Ref": "PrivateSubnet1"},
          {"Ref": "PrivateSubnet2"},
          {"Ref": "PrivateSubnet3"}
        ]
      ]}
    },
    "NatIPs": {
      "Description": "The Public IP of the NAT",
      "Value": {"Fn::Join": [
        ",",
        [
          {"Fn::GetAtt": [
            "NATInstance1",
            "PublicIp"
          ]},
          {"Fn::GetAtt": [
            "NATInstance2",
            "PublicIp"
          ]},
          {"Fn::GetAtt": [
            "NATInstance3",
            "PublicIp"
          ]}
        ]
      ]}
    },
    "VpnIP": {
      "Description": "The Public IP of the VPN",
      "Value": {"Fn::GetAtt": [
        "VPNInstance",
        "PublicIp"
      ]}
    },
    "VpnURL": {
      "Description": "The URL of Admin GUI",
      "Value": {"Fn::Join": [
        "",
        [
          "https://",
          {"Fn::GetAtt": [
            "VPNInstance",
            "PublicIp"
          ]},
          ":943/admin"
        ]
      ]}
    },
    "Gateway": {
      "Description": "Internet Gateway",
      "Value": {"Ref": "InternetGateway"}
    },
    "PublicNetworkAcl": {
      "Description": "Public Network ACL",
      "Value": {"Ref": "PublicNetworkAcl"}
    },
    "Zones": {
      "Description": "AZ Zones",
      "Value": {"Fn::Join": [
        ",",
        {"Ref": "Zones"}
      ]}
    }
  }
  }
  
  